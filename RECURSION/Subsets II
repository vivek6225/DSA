class Solution {
public:

// t.c= 0(2^n*n)

void getAllSubsets(vector<int>&nums,vector<int> &ans,int i,vector<vector<int>>& allSubsets){
    if(i == nums.size()){
        allSubsets.push_back(ans);
    
    return ;
    }
    //include
    ans.push_back(nums[i]);
    getAllSubsets(nums,ans,i+1,allSubsets);
    ans.pop_back();

    
    int indx = i+1;
    while(indx <  nums.size() && nums[indx] == nums[indx - 1]) indx++;
    //exclude
     getAllSubsets(nums,ans,indx,allSubsets);
}

    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> allSubsets;
        vector<int> ans;
        getAllSubsets(nums,ans,0,allSubsets);
        return allSubsets;
        
    }
};